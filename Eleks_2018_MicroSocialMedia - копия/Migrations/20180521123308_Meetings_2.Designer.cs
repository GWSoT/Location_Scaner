// <auto-generated />
using Eleks_2018_MicroSocialMedia.Data;
using Eleks_2018_MicroSocialMedia.WriteModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Eleks_2018_MicroSocialMedia.Migrations
{
    [DbContext(typeof(MSMContext))]
    [Migration("20180521123308_Meetings_2")]
    partial class Meetings_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("ProfileId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeviceId");

                    b.Property<int?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FriendFlag");

                    b.Property<DateTime>("LastNotification");

                    b.Property<int?>("MeetingId");

                    b.Property<int?>("RequestedById");

                    b.Property<int?>("RequestedToId");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("RequestedById");

                    b.HasIndex("RequestedToId");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Geolocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Geolocation");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.LastGeolocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("LastGeolocation");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MeetingLocationId");

                    b.Property<DateTime>("MeetingTime");

                    b.Property<int?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("MeetingLocationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("NotificationText");

                    b.Property<int?>("ProfileId");

                    b.Property<bool>("Read");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<int?>("GeolocationId");

                    b.Property<int?>("LastGeolocationId");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.HasIndex("LastGeolocationId");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.AppUser", b =>
                {
                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.Profile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("Eleks_2018_MicroSocialMedia.WriteModels.AppUser", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Device", b =>
                {
                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.Profile", "Profile")
                        .WithMany("Devices")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Friend", b =>
                {
                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.Meeting")
                        .WithMany("Friends")
                        .HasForeignKey("MeetingId");

                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.Profile", "RequestedBy")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("RequestedById");

                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.Profile", "RequestedTo")
                        .WithMany("ReceievedFriendRequests")
                        .HasForeignKey("RequestedToId");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Geolocation", b =>
                {
                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.Profile", "Profile")
                        .WithOne("Geolocation")
                        .HasForeignKey("Eleks_2018_MicroSocialMedia.WriteModels.Geolocation", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.LastGeolocation", b =>
                {
                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Meeting", b =>
                {
                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.Geolocation", "MeetingLocation")
                        .WithMany()
                        .HasForeignKey("MeetingLocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.Profile", "Profile")
                        .WithMany("Meetings")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Notification", b =>
                {
                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.Profile", "Profile")
                        .WithMany("Notifications")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("Eleks_2018_MicroSocialMedia.WriteModels.Profile", b =>
                {
                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.LastGeolocation", "LastGeolocation")
                        .WithMany()
                        .HasForeignKey("LastGeolocationId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Eleks_2018_MicroSocialMedia.WriteModels.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
